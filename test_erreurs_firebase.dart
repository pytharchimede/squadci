import 'package:firebase_core/firebase_core.dart';
import 'lib/firebase_options.dart';
import 'lib/services/auth_service.dart';

void main() async {
  print('=== TEST ERREURS FIREBASE ===\n');

  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print('‚úÖ Firebase initialis√©\n');

    final authService = AuthService();

    // Test 1: Email invalide
    print('--- TEST 1: EMAIL INVALIDE ---');
    try {
      await authService.registerWithEmail('email-invalide', 'password123');
    } catch (e) {
      print('‚úÖ Erreur captur√©e pour email invalide: $e\n');
    }

    // Test 2: Mot de passe trop faible
    print('--- TEST 2: MOT DE PASSE FAIBLE ---');
    try {
      await authService.registerWithEmail('test@example.com', '123');
    } catch (e) {
      print('‚úÖ Erreur captur√©e pour mot de passe faible: $e\n');
    }

    // Test 3: Cr√©er un compte puis essayer de le recr√©er
    print('--- TEST 3: EMAIL D√âJ√Ä UTILIS√â ---');
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final email = 'duplicate$timestamp@test.com';
    final password = 'ValidPassword123!';

    try {
      // Premi√®re inscription
      final user1 = await authService.registerWithEmail(email, password);
      print('‚úÖ Premier compte cr√©√©: ${user1?.uid}');

      // Deuxi√®me inscription avec le m√™me email
      try {
        await authService.registerWithEmail(email, password);
        print('‚ùå ERREUR: Le deuxi√®me compte a √©t√© cr√©√© !');
      } catch (e) {
        print('‚úÖ Erreur captur√©e pour email d√©j√† utilis√©: $e');
      }

      // Nettoyage
      if (user1 != null) {
        await authService.deleteAccount();
        print('üóëÔ∏è Compte de test supprim√©');
      }
    } catch (e) {
      print('‚ùå Erreur dans test duplicate: $e');
    }

    print('');

    // Test 4: Connexion avec compte inexistant
    print('--- TEST 4: COMPTE INEXISTANT ---');
    try {
      await authService.signInWithEmail('inexistant@test.com', 'password123');
    } catch (e) {
      print('‚úÖ Erreur captur√©e pour compte inexistant: $e\n');
    }

    // Test 5: Connexion avec mauvais mot de passe
    print('--- TEST 5: MAUVAIS MOT DE PASSE ---');
    final emailTest = 'testpassword$timestamp@test.com';
    try {
      // Cr√©er un compte
      final user = await authService.registerWithEmail(emailTest, password);
      print('‚úÖ Compte cr√©√© pour test mot de passe');

      // Se d√©connecter
      await authService.signOut();

      // Essayer de se connecter avec un mauvais mot de passe
      try {
        await authService.signInWithEmail(emailTest, 'MauvaisMotDePasse');
      } catch (e) {
        print('‚úÖ Erreur captur√©e pour mauvais mot de passe: $e');
      }

      // Nettoyage
      await authService.signInWithEmail(emailTest, password);
      await authService.deleteAccount();
      print('üóëÔ∏è Compte de test supprim√©');
    } catch (e) {
      print('‚ùå Erreur dans test mauvais mot de passe: $e');
    }

    print('\n=== FIN DES TESTS ===');
  } catch (e) {
    print('‚ùå Erreur d\'initialisation: $e');
  }
}
