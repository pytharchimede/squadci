import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../firebase_options.dart';

class FirebaseTestAPI {
  static Future<void> initializeFirebase() async {
    try {
      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      print('‚úÖ Firebase initialis√© avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur initialisation Firebase: $e');
    }
  }

  static Future<void> testFirebaseAuth() async {
    print('\n=== TEST FIREBASE AUTH ===');

    try {
      final auth = FirebaseAuth.instance;
      print('‚úÖ FirebaseAuth instance cr√©√©e');

      // Test de connexion anonyme
      print('\n--- Test connexion anonyme ---');
      try {
        final userCredential = await auth.signInAnonymously();
        if (userCredential.user != null) {
          print('‚úÖ Connexion anonyme r√©ussie');
          print('   User ID: ${userCredential.user!.uid}');
          print('   Is Anonymous: ${userCredential.user!.isAnonymous}');

          // D√©connexion
          await auth.signOut();
          print('‚úÖ D√©connexion r√©ussie');
        }
      } catch (e) {
        print('‚ùå Erreur connexion anonyme: $e');
      }

      // Test d'inscription
      print('\n--- Test inscription ---');
      String testEmail =
          'test${DateTime.now().millisecondsSinceEpoch}@example.com';
      String testPassword = 'TestPassword123!';

      try {
        final userCredential = await auth.createUserWithEmailAndPassword(
          email: testEmail,
          password: testPassword,
        );

        if (userCredential.user != null) {
          print('‚úÖ Inscription r√©ussie');
          print('   User ID: ${userCredential.user!.uid}');
          print('   Email: ${userCredential.user!.email}');

          // Test de connexion
          await auth.signOut();
          print('‚úÖ D√©connexion apr√®s inscription');

          print('\n--- Test connexion avec email ---');
          final loginCredential = await auth.signInWithEmailAndPassword(
            email: testEmail,
            password: testPassword,
          );

          if (loginCredential.user != null) {
            print('‚úÖ Connexion avec email r√©ussie');
            print('   User ID: ${loginCredential.user!.uid}');
          }

          // Nettoyage - suppression du compte test
          await loginCredential.user!.delete();
          print('‚úÖ Compte test supprim√©');
        }
      } catch (e) {
        print('‚ùå Erreur inscription/connexion: $e');
      }
    } catch (e) {
      print('‚ùå Erreur g√©n√©rale Firebase Auth: $e');
    }
  }

  static Future<void> testFirestore() async {
    print('\n=== TEST FIRESTORE ===');

    try {
      final firestore = FirebaseFirestore.instance;
      print('‚úÖ Firestore instance cr√©√©e');

      // Test d'√©criture
      print('\n--- Test √©criture Firestore ---');
      String testDocId = 'test_${DateTime.now().millisecondsSinceEpoch}';

      try {
        await firestore.collection('test').doc(testDocId).set({
          'message': 'Test depuis Flutter Web',
          'timestamp': FieldValue.serverTimestamp(),
          'created_at': DateTime.now().toIso8601String(),
        });
        print('‚úÖ Document cr√©√© avec succ√®s');
        print('   Document ID: $testDocId');

        // Test de lecture
        print('\n--- Test lecture Firestore ---');
        final doc = await firestore.collection('test').doc(testDocId).get();

        if (doc.exists) {
          print('‚úÖ Document lu avec succ√®s');
          print('   Data: ${doc.data()}');

          // Nettoyage - suppression du document test
          await firestore.collection('test').doc(testDocId).delete();
          print('‚úÖ Document test supprim√©');
        } else {
          print('‚ùå Document non trouv√©');
        }
      } catch (e) {
        print('‚ùå Erreur Firestore: $e');
      }
    } catch (e) {
      print('‚ùå Erreur g√©n√©rale Firestore: $e');
    }
  }

  static Future<void> testUserCreation() async {
    print('\n=== TEST CR√âATION UTILISATEUR COMPLET ===');

    try {
      final auth = FirebaseAuth.instance;
      final firestore = FirebaseFirestore.instance;

      String testEmail =
          'squadci_test${DateTime.now().millisecondsSinceEpoch}@example.com';
      String testPassword = 'SquadCI123!';
      String testPseudo = 'TestUser${DateTime.now().millisecondsSinceEpoch}';

      print('Email test: $testEmail');
      print('Pseudo test: $testPseudo');

      // 1. Cr√©er l'utilisateur Firebase Auth
      print('\n--- √âtape 1: Cr√©ation compte Firebase Auth ---');
      final userCredential = await auth.createUserWithEmailAndPassword(
        email: testEmail,
        password: testPassword,
      );

      if (userCredential.user != null) {
        print('‚úÖ Compte Firebase Auth cr√©√©');
        print('   UID: ${userCredential.user!.uid}');

        // 2. Cr√©er le profil Firestore
        print('\n--- √âtape 2: Cr√©ation profil Firestore ---');
        final userData = {
          'uid': userCredential.user!.uid,
          'pseudo': testPseudo,
          'email': testEmail,
          'quartierPrefere': 'Cocody',
          'inscritAt': FieldValue.serverTimestamp(),
          'isAnonymous': false,
          'created_at': DateTime.now().toIso8601String(),
        };

        await firestore
            .collection('users')
            .doc(userCredential.user!.uid)
            .set(userData);
        print('‚úÖ Profil Firestore cr√©√©');

        // 3. V√©rifier la cr√©ation
        print('\n--- √âtape 3: V√©rification ---');
        final userDoc = await firestore
            .collection('users')
            .doc(userCredential.user!.uid)
            .get();

        if (userDoc.exists) {
          print('‚úÖ Profil utilisateur v√©rifi√©');
          print('   Data: ${userDoc.data()}');
        } else {
          print('‚ùå Profil utilisateur non trouv√©');
        }

        // 4. Nettoyage
        print('\n--- √âtape 4: Nettoyage ---');
        await firestore
            .collection('users')
            .doc(userCredential.user!.uid)
            .delete();
        await userCredential.user!.delete();
        print('‚úÖ Utilisateur test supprim√©');
      } else {
        print('‚ùå √âchec cr√©ation compte Firebase Auth');
      }
    } catch (e) {
      print('‚ùå Erreur cr√©ation utilisateur complet: $e');
      if (e is FirebaseAuthException) {
        print('   Code erreur: ${e.code}');
        print('   Message: ${e.message}');
      }
    }
  }

  static Future<void> runAllTests() async {
    print('üöÄ D√âBUT DES TESTS FIREBASE API\n');

    await initializeFirebase();
    await testFirebaseAuth();
    await testFirestore();
    await testUserCreation();

    print('\nüèÅ FIN DES TESTS FIREBASE API');
  }
}
